package com.general_hello.commands.OtherEvents;

import com.general_hello.commands.Config;
import com.general_hello.commands.commands.GroupOfGames.MiniGames.ChessStoring;
import com.general_hello.commands.commands.GroupOfGames.MiniGames.MainChessCode;
import com.general_hello.commands.commands.PrefixStoring;
import com.general_hello.commands.commands.Register.Data;
import com.github.bhlangonijr.chesslib.Board;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Emoji;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.Button;
import net.dv8tion.jda.api.interactions.components.selections.SelectionMenu;
import org.jetbrains.annotations.NotNull;

import java.awt.*;

public class OnButtonClick extends ListenerAdapter {
    @Override
    public void onButtonClick(@NotNull ButtonClickEvent event) {
        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];
        String type = id[1];
        // When storing state like this is it is highly recommended to do some kind of verification that it was generated by you, for instance a signature or local cache

        try {
            event.deferEdit().queue();
        } catch (Exception ignored) {}

        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            event.reply(com.general_hello.commands.commands.Emoji.Emoji.ERROR + "You cannot press this button").setTTS(true).setEphemeral(true).queue();
            System.out.println("oof");
            return;
        }


        switch (type)
        {
            case "nope":
            case "end":
                event.getHook().deleteOriginal().queue();
                break;
            case "user":
                event.getHook().editOriginalEmbeds(helpCrap(4, event).build()).queue();
                return;
            case "bot":
                event.getHook().editOriginalEmbeds(helpCrap(2, event).build()).queue();
                return;
            case "info":
                event.getHook().editOriginalEmbeds(helpCrap(1, event).build()).queue();
                return;
            case "mod":
                event.getHook().editOriginalEmbeds(helpCrap(3, event).build()).queue();
                return;
            case "music":
                event.getHook().editOriginalEmbeds(helpCrap(6, event).build()).queue();
                return;
            case "game":
                event.getHook().editOriginalEmbeds(helpCrap(5, event).build()).queue();
                return;
            case "accept":
                String arrow = "<a:arrow_1:862525611465113640>";

                event.getHook().deleteOriginal().queue();
                EmbedBuilder em = new EmbedBuilder().setTitle("Stored data").setFooter("Press the Accept button if you accept the data that will be stored!\n");
                em.setDescription("The bot stores the following data:\n" +
                        arrow + " Reads all sent messages in the server the bot is in.\n" +
                        arrow + " Reads all the messages you sent to the bot.\n" +
                        arrow + " Reads your ignite coins.\n" +
                        arrow + " Reads your user name, profile picture, nitro status, and user id.\n" +
                        arrow + " Reads all the permissions you have on that server.");
                event.getChannel().sendMessageEmbeds(em.build()).setActionRow(
                        Button.primary("0000:yes", "Accept").withEmoji(Emoji.fromEmote("verify", Long.parseLong("803768813110951947"), true))
                ).queue();
                break;
            case "yes":
                event.getHook().deleteOriginal().queue();
                event.getChannel().sendMessage("<a:thanks:863989523461177394> Thank you for accepting the rules and data that will be stored.").queue();
                event.getChannel().sendMessage("<a:question:863989523368247346> For your Ignite Coins balance, may we ask for your complete, real name?").queue();
                Data.progress.put(event.getUser(), 1);
                break;
            case "acceptChess":
                event.getMessage().getActionRows().get(0).updateComponent(event.getUser().getId() + ":acceptChess", event.getButton().asDisabled());
                event.getChannel().sendMessage(event.getMember().getAsMention() + " accepted the Chess challenge!\nLoading the game " + com.general_hello.commands.commands.Emoji.Emoji.LOADING).queue();
                MainChessCode.loadBoard(event);
                Board board = new Board();
                ChessStoring.userToBoard.put(event.getUser(), board);
                ChessStoring.userToBoard.put(ChessStoring.userToUser.get(event.getUser()), board);
                event.getInteraction().editButton(event.getButton().asDisabled()).queue();
                break;
            case "ownersetting":
                EmbedBuilder embedBuilder = new EmbedBuilder().setTitle(event.getUser().getName() + "'s settings for " + event.getJDA().getSelfUser().getName()).setFooter("Your settings ↔ Owner Main Page").setColor(Color.ORANGE);
                embedBuilder.setDescription("Kindly select the setting you want to change. For example, Choosing ***Prefix on DM*** will bring you to a Prefix on DM setting page where you can set your setting for Prefix On DM`");

                SelectionMenu menu = SelectionMenu.create("menu:ownersetting:" + event.getUser().getId())
                        .setPlaceholder("No setting") // shows the placeholder indicating what this menu is for
                        .setRequiredRange(1, 1) // only one can be selected
                        //.addOption("mage-arcane", "Arcane Mage")
                        .build();
                event.getMessage().editMessageEmbeds(embedBuilder.build()).setActionRow(menu).queue();
                break;
            case "modsetting":
                embedBuilder = new EmbedBuilder().setTitle(event.getUser().getName() + "'s settings for " + event.getJDA().getSelfUser().getName()).setFooter("Your settings ↔ Moderator Main Page").setColor(Color.ORANGE);
                embedBuilder.setDescription("Kindly select the setting you want to change. For example, Choosing ***Prefix on DM*** will bring you to a Prefix on DM setting page where you can set your setting for Prefix On DM`");


                menu = SelectionMenu.create("menu:modsetting:" + event.getUser().getId())
                        .setPlaceholder("Choose your setting") // shows the placeholder indicating what this menu is for
                        .setRequiredRange(1, 1) // only one can be selected
                        .addOption("XP System", "enableXP")
                        .build();

                event.getMessage().editMessageEmbeds(embedBuilder.build()).setActionRow(menu).queue();
                break;
            case "usersetting":
                embedBuilder = new EmbedBuilder().setTitle(event.getUser().getName() + "'s settings for " + event.getJDA().getSelfUser().getName()).setFooter("Your settings ↔ User Main Page").setColor(Color.ORANGE);
                embedBuilder.setDescription("Kindly select the setting you want to change. For example, Choosing ***Prefix on ping*** will bring you to a Prefix on DM setting page where you can set your setting for Prefix On DM`");

                menu = SelectionMenu.create("menu:usersetting:" + event.getUser().getId())
                        .setPlaceholder("Choose your setting") // shows the placeholder indicating what this menu is for
                        .setRequiredRange(1, 1) // only one can be selected
                        .addOption("prefixDM", "Prefix on ping")
                        .build();

                event.getMessage().editMessageEmbeds(embedBuilder.build())
                        .setActionRow(menu).queue();
                break;
            case "back":
                embedBuilder = new EmbedBuilder().setTitle(event.getUser().getName() + "'s settings for " + event.getJDA().getSelfUser().getName()).setFooter("Your settings ↔ Home Page").setColor(Color.ORANGE);
                embedBuilder.setDescription("Kindly select the category you want to change the setting of. For example, Pressing/Clicking on the button ***User*** will bring you to a setting page where you can set your user setting for `Userphone Bot`");

                boolean isMod = true;

                if (event.getMember().hasPermission(Permission.MANAGE_SERVER)) {
                    isMod = false;
                }

                boolean isOwner = true;

                if (event.getUser().getId().equals(Config.get("owner_id")) || event.getUser().getId().equals(Config.get("owner_id_partner"))) {
                    isOwner = false;
                }

                event.getMessage().editMessageEmbeds(embedBuilder.build()).setActionRow(
                        Button.primary(event.getUser().getId() + ":usersetting", "User").withEmoji(net.dv8tion.jda.api.entities.Emoji.fromEmote("user", 862895295239028756L, true)),
                        Button.primary(event.getUser().getId() + ":modsetting", "Moderation").withDisabled(isMod).withEmoji(net.dv8tion.jda.api.entities.Emoji.fromEmote("mod", 862898484041482270L, true)),
                        Button.primary(event.getUser().getId() + ":ownersetting", "Owner").withDisabled(isOwner).withEmoji(net.dv8tion.jda.api.entities.Emoji.fromEmote("babyyoda", 866105061665669140L, true))
                ).queue();
                break;

            default:
                event.reply(com.general_hello.commands.commands.Emoji.Emoji.ERROR + "You cannot press this button").setTTS(true).setEphemeral(true).queue();
        }
    }

    public EmbedBuilder helpCrap (int number, ButtonClickEvent ctx) {
        EmbedBuilder embedBuilder = new EmbedBuilder();
        final long guildID = ctx.getGuild().getIdLong();
        String prefix = PrefixStoring.PREFIXES.computeIfAbsent(guildID, (id) -> Config.get("prefix"));

        switch (number) {
            case 1:
                embedBuilder.setTitle("Information Commands");
                embedBuilder.setColor(Color.YELLOW);
                embedBuilder.addField("1.) Profile Command","`" + prefix + " profile`", false);
                embedBuilder.addField("2.) Server Information Command","`" + prefix + " serverinfo`", false);

                embedBuilder.setFooter("\nType " + prefix + "help [command name] to see what they do");
                break;
            case 2:
                embedBuilder.setTitle("About the Bot Commands");
                embedBuilder.setColor(Color.blue);
                embedBuilder.addField("1.) Uptime Command", "`" + prefix + " uptime`", false);
                embedBuilder.addField("2.) Ping Command", "`" + prefix + " ping`", false);
                embedBuilder.addField("3.) About Command", "`" + prefix + " about`", false);


                embedBuilder.setFooter("\nType " + prefix + "help [command name] to see what they do");
                break;
            case 3:
                embedBuilder.setTitle("Moderation Commands");
                embedBuilder.setColor(Color.red);
                embedBuilder.addField("1.) Set Prefix Command", "`" + prefix + " setprefix`", false);
                embedBuilder.addField("2.) Lockdown Command", "`" + prefix + " lockdown`", false);

                embedBuilder.setFooter("\nType " + prefix + "help [command name] to see what they do");
                break;
            case 4:
                embedBuilder.setTitle("User Commands");
                embedBuilder.setColor(Color.CYAN);
                embedBuilder.addField("1.) Calculator Command", "`" + prefix + " calculator`", false);
                embedBuilder.addField("2.) Register Command", "`" + prefix + " register`", false);
                embedBuilder.addField("3.) View rank Command", "`" + prefix + " rank` or `/rank`", false);
                embedBuilder.addField("4.) Show a Joke Command", "`" + prefix + " joke`", false);
                embedBuilder.addField("5.) Show a Meme Command", "`" + prefix + " meme`", false);
                embedBuilder.addField("6.) Say Command", "`" + prefix + " say`", false);
                embedBuilder.addField("7.) Clap Command", "`" + prefix + " clap`", false);
                embedBuilder.addField("8.) Color Command", "`" + prefix + " color`", false);
                embedBuilder.addField("9.) Read File Command", "`" + prefix + " read`", false);
                embedBuilder.addField("10.) Share code Command (Programming)", "`" + prefix + " sharecode`", false);

                embedBuilder.setFooter("Type " + prefix + "help [command name] to see what they do");
                break;
            case 5:
                embedBuilder.setTitle("Games");
                embedBuilder.setColor(Color.ORANGE);
                embedBuilder.setDescription("Uno\n" +
                        "Blackjack\n" +
                        "Others....");

                embedBuilder.setFooter("Type " + prefix + "help [command name] to see what they do");
                break;
            case 6:
                embedBuilder.setTitle("Music Commands *Temporary* " + com.general_hello.commands.commands.Emoji.Emoji.ERROR);
                embedBuilder.setColor(Color.blue);
                embedBuilder.addField("1.) Play Command", "`/play` or `" + prefix + " play`", false);
                embedBuilder.addField("2.) Pause Command", "`/pause` or `" + prefix + " pause`", false);
                embedBuilder.addField("3.) Queue Command", "`/queue` or `" + prefix + " queue`", false);
                embedBuilder.addField("4.) Repeat Command", "`/repeat` or `" + prefix + " repeat`", false);
                embedBuilder.addField("5.) Resume Command", "`/resume` or `" + prefix + " resume`", false);
                embedBuilder.addField("6.) Skip Command", "`/skip` or `" + prefix + " skip`", false);
                embedBuilder.addField("7.) Volume Command", "`/volume` or `" + prefix + " volume`", false);

                embedBuilder.setFooter("Type " + prefix + "help [command name] to see what they do");
        }
        return embedBuilder;
    }
}
