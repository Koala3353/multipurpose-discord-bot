package com.general_hello.commands.OtherEvents;

import com.general_hello.commands.Database.DatabaseManager;
import com.general_hello.commands.commands.Auction.Auction;
import com.general_hello.commands.commands.Auction.AuctionToChannelStoring;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Emoji;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.Button;
import net.dv8tion.jda.api.interactions.components.ButtonStyle;
import net.dv8tion.jda.api.utils.TimeFormat;
import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.time.OffsetDateTime;
import java.util.HashMap;


public class OnButtonClickAuction extends ListenerAdapter {
    public static HashMap<Auction, Integer> topBid = new HashMap<>();
    @Override
    public void onButtonClick(@NotNull ButtonClickEvent event) {
        String userId = event.getUser().getId();

        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];

        if (id.length == 1) {
            return;
        }

        String type = id[1];
        // When storing state like this is it is highly recommended to do some kind of verification that it was generated by you, for instance a signature or local cache

        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            System.out.println("oof");
            return;
        }

        if (!AuctionToChannelStoring.bidToUser.containsKey(event.getUser())) {
            AuctionToChannelStoring.bidToUser.put(event.getUser(), "");
        }

        String pastNumber = AuctionToChannelStoring.bidToUser.get(event.getUser());

        String auctionId = null;
        try {
            auctionId = id[2];
        } catch (Exception ignored) {}

        switch (type) {
            case "one":
                pastNumber = pastNumber + "1";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "two":
                pastNumber = pastNumber + "2";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "three":
                pastNumber = pastNumber + "3";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "four":
                pastNumber = pastNumber + "4";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "five":
                pastNumber = pastNumber + "5";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "six":
                pastNumber = pastNumber + "6";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "seven":
                pastNumber = pastNumber + "7";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "eight":
                pastNumber = pastNumber + "8";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "nine":
                pastNumber = pastNumber + "9";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "zero":
                pastNumber = pastNumber + "0";
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "delete":
                if (pastNumber.length() == 0) {
                    event.getUser().openPrivateChannel().queue((privateChannel -> {
                        privateChannel.sendMessage("You cannot delete anymore!!!").queue();
                    }));
                    return;
                }

                pastNumber = pastNumber.substring(0, pastNumber.length()-1);
                AuctionToChannelStoring.bidToUser.put(event.getUser(), pastNumber);
                addButtons(event, userId, pastNumber, auctionId);
                break;
            case "submit":
                Auction auction = AuctionToChannelStoring.idAuctionHashMap.get(Integer.parseInt(auctionId));
                int credits = DatabaseManager.INSTANCE.getCredits(event.getUser().getIdLong());
                long minBid = auction.getMinBid();
                long maxBid = auction.getMaxBid();
                long bid = Long.parseLong(pastNumber);
                if (bid > maxBid || bid < minBid) {
                    event.getUser().openPrivateChannel().queue((privateChannel -> {
                        privateChannel.sendMessage("You cannot bid that high/low!!!").queue();
                    }));
                    event.deferEdit().queue();
                    return;
                }

                if (credits < bid) {
                    event.getUser().openPrivateChannel().queue((privateChannel -> {
                        privateChannel.sendMessage("You do not have enough money to place that bid!!!").queue();
                    }));
                    event.deferEdit().queue();
                    return;
                }

                if(!topBid.containsKey(auction)) {
                    topBid.put(auction, Integer.valueOf(pastNumber));
                } else {
                    if (topBid.get(auction) > Integer.parseInt(pastNumber)) {
                        event.getUser().openPrivateChannel().queue((privateChannel -> {
                            privateChannel.sendMessage("You cannot place that bid!!! The current highest bid is " + topBid.get(auction)).queue();
                        }));
                        event.deferEdit().queue();
                        return;
                    }
                }
                AuctionToChannelStoring.idAuctionHashMap.put(Integer.parseInt(auctionId),  auction.newBidders(pastNumber.length()-1, event.getUser(), Long.parseLong(pastNumber)));
                event.getHook().editOriginal("Successfully placed your bid of **" + pastNumber + "** for the item of **" + auction.getItem() + "**").setActionRow(Button.of(ButtonStyle.SUCCESS, "DONEBIDDING", "Finished!").asDisabled()).queue();
                AuctionToChannelStoring.bidToUser.remove(event.getUser());
                auction.getLogChannel().sendMessage(event.getMember().getAsMention() + " placed a bid of " + pastNumber + " for " + auction.getItem()).queue();
                OffsetDateTime offsetDateTime = auction.getTime();
                String item = auction.getItem();
                Role role = auction.getAllowedRole();

                EmbedBuilder embedBuilder = new EmbedBuilder();
                embedBuilder.setTitle("Auction for " + item);
                embedBuilder.setDescription("Length of Auction: " + TimeFormat.RELATIVE.format(offsetDateTime) +
                        "\n" +
                        "Maximum bid: " + maxBid +
                        "\n" +
                        "Minimum bid: " + minBid +
                        "\n" +
                        "Role: " + role.getAsMention() + "\n\n" +
                        "Highest Bid:\n" +
                        event.getMember().getAsMention() + " placed a bid of " + pastNumber);
                embedBuilder.setColor(Color.CYAN);
                embedBuilder.setTimestamp(OffsetDateTime.now());
                embedBuilder.setThumbnail("https://tenor.com/view/sold-auction-gif-9041957");
                OnSetupMessage.mainMessage.get(auction).editMessageEmbeds(embedBuilder.build())
                        .setActionRows(
                                ActionRow.of(Button.primary("0000:placebid:" + auctionId, "Place Bid"))
                        ).queue();
                break;
            case "placebid":
                event.reply("Kindly press the buttons to place your bid!\n" +
                "✅ - Submit\n" +
                ":x: - Backspace\n\n" +
                "Bid: **Nothing so far! []~(￣▽￣)~ **").setEphemeral(true).addActionRows(
                ActionRow.of(
                        Button.secondary(userId + ":one" + ":" + auctionId, Emoji.fromUnicode("\u0031\u20E3")),
                        Button.secondary(userId + ":two" + ":" + auctionId, Emoji.fromUnicode("\u0032\u20E3")),
                        Button.secondary(userId + ":three" + ":" + auctionId, Emoji.fromUnicode("\u0033\u20E3"))
                ),
                ActionRow.of(
                        Button.secondary(userId + ":four" + ":" + auctionId, Emoji.fromUnicode("\u0034\u20E3")),
                        Button.secondary(userId + ":five" + ":" + auctionId, Emoji.fromUnicode("\u0035\u20E3")),
                        Button.secondary(userId + ":six" + ":" + auctionId, Emoji.fromUnicode("\u0036\u20E3"))
                ),
                ActionRow.of(
                        Button.secondary(userId + ":seven" + ":" + auctionId, Emoji.fromUnicode("\u0037\u20E3")),
                        Button.secondary(userId + ":eight" + ":" + auctionId, Emoji.fromUnicode("\u0038\u20E3")),
                        Button.secondary(userId + ":nine" + ":" + auctionId, Emoji.fromUnicode("\u0039\u20E3"))
                ),
                ActionRow.of(
                        Button.secondary(userId + ":delete" + ":" + auctionId, Emoji.fromUnicode("\u274C")),
                        Button.secondary(userId + ":zero" + ":" + auctionId, Emoji.fromUnicode("\u0030\u20E3")),
                        Button.secondary(userId + ":submit" + ":" + auctionId, Emoji.fromUnicode("\u2705"))
                )).queue();
                return;
        }

        if (!event.isAcknowledged()) event.deferEdit().queue();
    }

    private void addButtons(@NotNull ButtonClickEvent event, String userId, String pastNumber, String auctionId) {
        event.getHook().editOriginal("Kindly press the buttons to place your bid!\n" +
                 "✅ - Submit\n" +
                 ":x: - Backspace\n\n" +
                 "Bid: **" + pastNumber + "**").setActionRows(
                ActionRow.of(
                        Button.secondary(userId + ":one" + ":" + auctionId, Emoji.fromUnicode("\u0031\u20E3")),
                        Button.secondary(userId + ":two" + ":" + auctionId, Emoji.fromUnicode("\u0032\u20E3")),
                        Button.secondary(userId + ":three" + ":" + auctionId, Emoji.fromUnicode("\u0033\u20E3"))
                ),
                ActionRow.of(
                        Button.secondary(userId + ":four" + ":" + auctionId, Emoji.fromUnicode("\u0034\u20E3")),
                        Button.secondary(userId + ":five" + ":" + auctionId, Emoji.fromUnicode("\u0035\u20E3")),
                        Button.secondary(userId + ":six" + ":" + auctionId, Emoji.fromUnicode("\u0036\u20E3"))
                ),
                ActionRow.of(
                        Button.secondary(userId + ":seven" + ":" + auctionId, Emoji.fromUnicode("\u0037\u20E3")),
                        Button.secondary(userId + ":eight" + ":" + auctionId, Emoji.fromUnicode("\u0038\u20E3")),
                        Button.secondary(userId + ":nine" + ":" + auctionId, Emoji.fromUnicode("\u0039\u20E3"))
                ),
                ActionRow.of(
                        Button.secondary(userId + ":delete" + ":" + auctionId, Emoji.fromUnicode("\u274C")),
                        Button.secondary(userId + ":zero" + ":" + auctionId, Emoji.fromUnicode("\u0030\u20E3")),
                        Button.secondary(userId + ":submit" + ":" + auctionId, Emoji.fromUnicode("\u2705"))
                )).queue();

        event.deferEdit().queue();
    }
}
